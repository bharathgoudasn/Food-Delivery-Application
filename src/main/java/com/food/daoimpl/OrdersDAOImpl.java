package com.food.daoimpl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;

import com.food.DBconnection.DBconnection;
import com.food.dao.OdersDAO;
import com.food.model.Orders;

public class OrdersDAOImpl implements OdersDAO {

	private static Connection con;
	ArrayList<Orders> list=new ArrayList<>();
	private static final String INSERT="insert into Orders(userid,restaurantid,totalamount,status,paymentmode) values(?,?,?,?,?)";
	private static final String FETCHALL="select * from Orders";
	private static final String FETCHONE="Select * from Orders where orderid=?";
	private static final String FETCHBYUSERID="Select * from Orders where userid=?";
	private static final String UPDATE="update Orders set status=? where orderid=?";
	private static final String DELETE="delete from Orders where orderid=?";
	static
	{
		con=DBconnection.connect();
	}

	private PreparedStatement pstmt;
	private Statement stmt;
	private ResultSet resultSet;
	
	
	
	@Override
	public int insert(Orders o) {
		try
		{
			// should add Statement.RETURN_GENERATED_KEYS to get autogenerated id
		pstmt=con.prepareStatement(INSERT,Statement.RETURN_GENERATED_KEYS);
		pstmt.setInt(1, o.getUserid());
		pstmt.setInt(2, o.getRestautid());
		pstmt.setFloat(3, o.getTotalamount());
		pstmt.setString(4, o.getStatus());
		pstmt.setString(5, o.getPaymentmode());
		
		int affectedRows=pstmt.executeUpdate();
		//to get auto generated id
		ResultSet res1=pstmt.getGeneratedKeys();
		int orderId=0;
		while(res1.next()) {
			orderId=res1.getInt(1);
		}
		return orderId;
		
		}catch(Exception e) {
			e.printStackTrace();
		   return 0;
		}
	}

	@Override
	public ArrayList<Orders> fetchAll() {
		try
		{
		stmt=con.createStatement();
		resultSet=stmt.executeQuery(FETCHALL);
		return order(resultSet);
		}
		catch(Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public ArrayList<Orders> order(ResultSet rl){
		try
		{
			while(rl.next())
			{
				list.add(
						new Orders(
								rl.getInt("orderid"),
								rl.getInt("userid"),
								rl.getInt("restaurantid"),
								rl.getFloat("totalamount"),
								rl.getString("status"),
								rl.getString("paymentmode")
								)
						);
			}
			return list;
		}catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
	}

	@Override
	public Orders fetchOne(int id) {
		try
		{
		pstmt=con.prepareStatement(FETCHONE);
		pstmt.setInt(1,id);
		resultSet=pstmt.executeQuery();
		list=order(resultSet);
		
		return list.get(0);
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
		
	}
	public ArrayList<Orders> fetchbyUserId(int id) {
		try
		{
			pstmt=con.prepareStatement(FETCHBYUSERID);
			pstmt.setInt(1,id);
			resultSet=pstmt.executeQuery();
			list=order(resultSet);
			
			return list;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}
		
	}

	@Override
	public int update(int id, String status) {
		try
		{
		pstmt=con.prepareStatement(UPDATE);
		pstmt.setInt(2,id);
		pstmt.setString(1, status);
		
		return pstmt.executeUpdate();
		}
		catch(Exception e)
		{  
			e.printStackTrace();
			return 0;
		}
	}

	@Override
	public int delete(int id) {
		try
		{
		pstmt=con.prepareStatement(DELETE);
		pstmt.setInt(1,id);
		
		return pstmt.executeUpdate();
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return 0;
		}	
	}
}
